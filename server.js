const express = require('express');
const path = require('path');
const fs = require('fs');
const multer = require('multer');
const mongoose = require('mongoose');
const app = express();
const PORT = process.env.PORT || 3000;

// K·∫øt n·ªëi MongoDB t·ª´ Railway
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/lovewebsite';

// 1. Kh·ªüi t·∫°o k·∫øt n·ªëi Mongoose (KH√îNG CH·∫∂N SERVER)
mongoose.connect(MONGODB_URI, {
    serverSelectionTimeoutMS: 30000, // TƒÉng th·ªùi gian ch·ªù k·∫øt n·ªëi l√™n 30 gi√¢y
})
.then(() => console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB.')) 
.catch(err => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err));

// Schema cho m·∫≠t kh·∫©u
const passwordSchema = new mongoose.Schema({
    sitePassword: { type: String, default: '611181' },
    adminPassword: { type: String, default: '611181' }
});
const Password = mongoose.model('Password', passwordSchema);

// Schema cho tin nh·∫Øn
const messageSchema = new mongoose.Schema({
    content: String,
    date: String,
    timestamp: { type: Date, default: Date.now }
});
const Message = mongoose.model('Message', messageSchema);

// Schema cho ·∫£nh
const imageSchema = new mongoose.Schema({
    imageUrl: String,
    filename: String,
    timestamp: { type: Date, default: Date.now }
});
const LoveImage = mongoose.model('LoveImage', imageSchema);

// Schema cho ƒëi·ªÉm game
const scoreSchema = new mongoose.Schema({
    playerName: String,
    score: Number,
    level: Number,
    clicksPerMinute: Number,
    timestamp: { type: Date, default: Date.now }
});
const GameScore = mongoose.model('GameScore', scoreSchema);

// Middleware
app.use(express.json());
app.use(express.static(__dirname));

// C·∫•u h√¨nh multer ƒë·ªÉ upload file
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadDir = path.join(__dirname, 'uploads');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir);
        }
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        const uniqueName = Date.now() + '-' + Math.round(Math.random() * 1E9) + path.extname(file.originalname);
        cb(null, uniqueName);
    }
});

const upload = multer({ 
    storage: storage,
    limits: { fileSize: 5 * 1024 * 1024 },
    fileFilter: function (req, file, cb) {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('Ch·ªâ ƒë∆∞·ª£c upload file ·∫£nh!'), false);
        }
    }
});

// üîê H√†m ƒë·ªçc m·∫≠t kh·∫©u t·ª´ database
async function readPasswords() {
    try {
        let passwords = await Password.findOne();
        if (!passwords) {
            passwords = new Password();
            await passwords.save();
        }
        return passwords;
    } catch (error) {
        console.error('L·ªói ƒë·ªçc m·∫≠t kh·∫©u t·ª´ database:', error);
        return { sitePassword: 'love', adminPassword: 'admin' };
    }
}

// Middleware x√°c th·ª±c (Site)
const requireAuth = (passwordType) => async (req, res, next) => {
    try {
        const password = req.headers['authorization'];
        const passwords = await readPasswords();
        
        if (password === passwords[passwordType]) {
            next();
        } else {
            res.status(401).json({ error: 'M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá' });
        }
    } catch (error) {
        res.status(500).json({ error: 'L·ªói x√°c th·ª±c' });
    }
};

// ‚ùå B·ªé M·∫¨T KH·∫®U ADMIN: Lu√¥n cho ph√©p truy c·∫≠p
const requireAdminAuth = (req, res, next) => {
    next();
};

const requireSiteAuth = requireAuth('sitePassword');

// üîê API ƒêƒÉng nh·∫≠p Admin
app.post('/api/admin-login', async (req, res) => {
    try {
        const { password } = req.body;
        const passwords = await readPasswords();
        
        if (password === passwords.adminPassword) {
            res.json({ success: true });
        } else {
            res.status(401).json({ success: false, error: 'Sai m·∫≠t kh·∫©u' });
        }
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üîê API Ki·ªÉm tra m·∫≠t kh·∫©u trang ch√≠nh (D√πng cho index.html)
app.post('/api/check-password', async (req, res) => {
    try {
        const { password } = req.body;
        const passwords = await readPasswords();
        
        if (password === passwords.sitePassword) {
            res.json({ success: true });
        } else {
            res.status(401).json({ success: false, error: 'Sai m·∫≠t kh·∫©u' });
        }
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üîê API L·∫•y th√¥ng tin m·∫≠t kh·∫©u
app.get('/api/passwords', requireAdminAuth, async (req, res) => {
    try {
        const passwords = await readPasswords();
        res.json(passwords);
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üîê API ƒê·ªïi m·∫≠t kh·∫©u trang ch√≠nh
app.post('/api/change-site-password', requireAdminAuth, async (req, res) => {
    try {
        const { newPassword } = req.body;
        if (!newPassword || newPassword.length < 3) {
            return res.status(400).json({ error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±' });
        }
        
        let passwords = await Password.findOne();
        if (!passwords) {
            passwords = new Password();
        }
        passwords.sitePassword = newPassword;
        await passwords.save();
        
        res.json({ success: true, message: 'ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u trang ch√≠nh th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üîê API ƒê·ªïi m·∫≠t kh·∫©u admin
app.post('/api/change-admin-password', requireAdminAuth, async (req, res) => {
    try {
        const { newPassword } = req.body;
        if (!newPassword || newPassword.length < 3) {
            return res.status(400).json({ error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±' });
        }
        
        let passwords = await Password.findOne();
        if (!passwords) {
            passwords = new Password();
        }
        passwords.adminPassword = newPassword;
        await passwords.save();
        
        res.json({ success: true, message: 'ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u admin th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üíå API Tin nh·∫Øn (C·∫ßn Site Auth)
app.get('/api/messages', requireSiteAuth, async (req, res) => {
    try {
        const messages = await Message.find().sort({ timestamp: -1 }).limit(50);
        res.json({ messages: messages.map(m => `[${m.date}] ${m.content}`) });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

app.post('/api/message', requireSiteAuth, async (req, res) => {
    try {
        const { date, message } = req.body;
        if (!message || !date) {
            return res.status(400).json({ error: 'Vui l√≤ng ƒëi·ªÅn ƒë·ªß th√¥ng tin.' });
        }
        
        const newMessage = new Message({ content: message, date });
        await newMessage.save();
        
        res.json({ success: true, message: 'ƒê√£ l∆∞u tin nh·∫Øn th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üíå API Qu·∫£n l√Ω tin nh·∫Øn (admin)
app.get('/api/love-messages', requireAdminAuth, async (req, res) => {
    try {
        const messages = await Message.find().sort({ timestamp: -1 });
        res.json({ messages: messages.map(m => m.content) });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

app.post('/api/love-messages', requireAdminAuth, async (req, res) => {
    try {
        const { message } = req.body;
        if (!message) {
            return res.status(400).json({ error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
        }
        
        const newMessage = new Message({ 
            content: message, 
            date: new Date().toLocaleDateString('vi-VN') 
        });
        await newMessage.save();
        
        res.json({ success: true, message: 'ƒê√£ th√™m tin nh·∫Øn th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

app.delete('/api/messages', requireAdminAuth, async (req, res) => {
    try {
        await Message.deleteMany({});
        res.json({ success: true, message: 'ƒê√£ x√≥a to√†n b·ªô tin nh·∫Øn.' });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üñºÔ∏è API Upload t·ª´ URL
app.post('/api/upload-url', requireAdminAuth, async (req, res) => {
    try {
        const { imageUrl } = req.body;
        if (!imageUrl) {
            return res.status(400).json({ error: 'URL ·∫£nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
        }
        
        await LoveImage.deleteMany({});
        
        const newImage = new LoveImage({ imageUrl });
        await newImage.save();
        
        res.json({ success: true, message: 'ƒê√£ l∆∞u ·∫£nh t·ª´ URL th√†nh c√¥ng!', image: imageUrl });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üñºÔ∏è API Upload file
app.post('/api/upload-file', requireAdminAuth, upload.single('image'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ success: false, error: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn" });
        }
        
        const imagePath = '/uploads/' + req.file.filename;
        
        await LoveImage.deleteMany({});
        
        const newImage = new LoveImage({ 
            imageUrl: imagePath,
            filename: req.file.filename
        });
        await newImage.save();
        
        res.json({ 
            success: true, 
            image: imagePath, 
            message: "ƒê√£ upload ·∫£nh th√†nh c√¥ng!",
            filename: req.file.filename
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message || "L·ªói khi upload ·∫£nh" });
    }
});

// üñºÔ∏è API l·∫•y ·∫£nh
app.get('/api/love-image', requireSiteAuth, async (req, res) => {
    try {
        const image = await LoveImage.findOne().sort({ timestamp: -1 });
        res.json({ image: image ? image.imageUrl : '' });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üéÆ API Game - L∆∞u ƒëi·ªÉm s·ªë
app.post('/api/game-score', requireSiteAuth, async (req, res) => {
    try {
        const { score, level, clicksPerMinute, playerName = 'Ng∆∞·ªùi ch∆°i' } = req.body;
        
        const newScore = new GameScore({
            playerName,
            score,
            level,
            clicksPerMinute,
            timestamp: new Date()
        });
        
        await newScore.save();
        res.json({ success: true, message: 'ƒê√£ l∆∞u ƒëi·ªÉm s·ªë!' });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// üéÆ API Game - L·∫•y b·∫£ng x·∫øp h·∫°ng
app.get('/api/game-scores', requireSiteAuth, async (req, res) => {
    try {
        const scores = await GameScore.find().sort({ score: -1 }).limit(10);
        res.json({ scores });
    } catch (error) {
        res.status(500).json({ error: 'L·ªói server' });
    }
});

// Ph·ª•c v·ª• file upload
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// üéØ ROUTING CH√çNH
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin.html'));
});

app.get('/game', (req, res) => {
    res.sendFile(path.join(__dirname, 'game.html'));
});

// Tuy·∫øn ƒë∆∞·ªùng cho c√°c trang k·ª∑ ni·ªám
app.get('/tym1', (req, res) => {
    res.sendFile(path.join(__dirname, 'index_tym1.html'));
});

app.get('/tym2', (req, res) => {
    res.sendFile(path.join(__dirname, 'index_tym2.html'));
});

app.get('/tym3', (req, res) => {
    res.sendFile(path.join(__dirname, 'index_tym3.html'));
});

// X·ª≠ l√Ω l·ªói upload
app.use((error, req, res, next) => {
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ error: 'File qu√° l·ªõn! T·ªëi ƒëa 5MB.' });
        }
    }
    next(error);
});

// Route m·∫∑c ƒë·ªãnh
app.use((req, res) => {
    res.status(404).send('Trang kh√¥ng t·ªìn t·∫°i');
});

// 2. CH·ªàNH S·ª¨A CU·ªêI C√ôNG: Bu·ªôc server ch·ªù k·∫øt n·ªëi DB
const startServer = async () => {
    // Ch·ªù Mongoose b√°o hi·ªáu k·∫øt n·ªëi DB ƒë√£ m·ªü th√†nh c√¥ng
    await mongoose.connection.once('open', async () => {
        console.log("MongoDB ƒë√£ s·∫µn s√†ng. Kh·ªüi ƒë·ªông Server...");
        
        // Server l·∫Øng nghe request ch·ªâ sau khi DB ƒë√£ s·∫µn s√†ng
        app.listen(PORT, () => {
            console.log(`üöÄ Server ƒëang ch·∫°y tr√™n port ${PORT}`);
            console.log(`üîó Truy c·∫≠p: http://localhost:${PORT}`);
            console.log(`üóÑÔ∏è Database: ${MONGODB_URI}`);
        });
    });
    
    // N·∫øu k·∫øt n·ªëi b·ªã l·ªói trong qu√° tr√¨nh ch·∫°y
    mongoose.connection.on('error', (err) => {
        console.error('MongoDB connection error (Event):', err);
    });
};

startServer();
